# Set the name of the workflow and specify the trigger event
name: Build and Deploy

on:
  push:
    branches:
      - main

# Define environment variables used in the job
env:
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}

# Define the jobs to be executed
jobs:
  # Define the first job to build and push the Docker image
  build-and-push:
    # Set the type of machine to run the job on
    runs-on: ubuntu-22.04

    # Define the steps to be executed in the job
    steps:

      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Login to Docker Hub with the Docker credentials
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_ACCESS_TOKEN }}

      # Build and push the Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: backend-api  # Set the context for the Docker build to the backend-api directory
          push: true  # Push the Docker image to Docker Hub
          tags: |

           varun8487/task:${{ github.sha }}
           varun8487/task:latest
           
  # Define the second job to deploy the Kubernetes manifest
  deploy-kubernetes:
    # Set the type of machine to run the job on
    runs-on: ubuntu-22.04

    # Define the dependencies for the job
    needs: build-and-push

    # Define the steps to be executed in the job
    steps:

      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Apply the Kubernetes manifest to the cluster
      - name: Apply Kubernetes manifest
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}  # Set the KUBECONFIG environment variable to the path of the Kubernetes configuration file
        with:
          args: apply -f kubernetes-manifest/deployment.yaml  # Apply the Kubernetes manifest located at the specified path